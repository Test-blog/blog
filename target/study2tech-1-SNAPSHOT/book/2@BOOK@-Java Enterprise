

H3#@1. The advantages of a 3-tiered or n-tiered application
3-tier or multi-tier architectures force separation among
presentation logic, business logic and database logic. Let us look at some of the key benefits:
a. Manageability: Each tier can be monitored, tuned and upgraded independently and different people can have
clearly defined responsibilities. 
b. Scalability: More hardware can be added and allows clustering (i.e. horizontal scaling).
c. Maintainability: Changes and upgrades can be performed without affecting other components.
d. Availability: Clustering and load balancing can provide availability.
e. Extensibility: Additional features can be easily added.

H3#@2.	How to avoid the “running out of cursors” problem?
A database can run out of cursors if the connection is not closed properly or the DBA has not allocated enough
cursors. In a Java code it is essential that we close all the valuable resources in a try{} and finally{} block. The
finally{} block is always executed even if there is an exception thrown from the catch {} block. So the resources like
connections and statements should be closed in a finally {} block. 

H3#@3. What is a distributed transaction? What is a 2-phase commit?
A Transaction is a series of actions performed as a single unit of work in which
either all of the actions performed as a logical unit of work in which, either all of the actions are performed or none
of the actions. A transaction is often described by ACID properties (Atomic, Consistent, Isolated and Durable). A
distributed transaction is an ACID transaction between two or more independent transactional resources like
two separate databases. For the transaction to commit successfully, all of the individual resources must commit
successfully. If any of them are unsuccessful, the transaction must rollback in all of the resources. A 2-phase
commit is an approach for committing a distributed transaction in 2 phases.
b#@
bO#@Phase 1 is prepare: 
Each of the resources votes on whether it’s ready to commit – usually by going ahead and
persisting the new data but not yet deleting the old data.
b#@
bo#@Phase 2 is committing: 
If all the resources are ready, they all commit – after which old data is deleted and
transaction can no longer roll back. 2-phase commit ensures that a distributed transaction can always be
committed or always rolled back if one of the databases crashes. The XA specification defines how an application
program uses a transaction manager to coordinate distributed transactions across multiple resource managers.
Any resource manager that adheres to XA specification can participate in a transaction coordinated by an XAcompliant
transaction manager.


H3#@4. What is Message Oriented Middleware? What is JMS?
Message Oriented Middleware (MOM) is generally defined as a software infrastructure that asynchronously
communicates with other disparate systems through the production and consumption of messages. A message
may be a request, a report, or an event sent from one part of an enterprise application to another.
b#@
Messaging enables loosely coupled distributed communication. A component sends a message to a destination,
and the recipient can retrieve the message from the destination. However, the sender and the receiver do not
have to be available at the same time in order to communicate and also they are not aware of each other. In fact,
the sender does not need to know anything about the receiver; nor does the receiver need to know anything about
the sender. The sender and the receiver need to know only what message format and what destination to use. In
this respect, messaging differs from tightly coupled technologies, such as Remote Method Invocation (RMI), which
requires an application to know a remote application's methods.
b#@
Message Oriented Middleware (MOM) systems like MQSeries, MQSonic, etc are proprietary systems. Java
Message Service (JMS) is a Java API that allows applications to create, send, receive, and read messages in a
standard way. Designed by Sun and several partner companies, the JMS API defines a common set of interfaces
and associated semantics that allow programs written in the Java programming language to communicate with
other messaging implementations (e.g. MQSonic, TIBCO etc). The JMS API minimises the set of concepts a
programmer must learn to use messaging products but provides enough features to support sophisticated
messaging applications. It also strives to maximise the portability of JMS applications across JMS providers.



H3#@5.	What type of messaging is provided by JMS?
Point-to-Point: provides a traditional queue based mechanism where the client application sends a message
through a queue to typically one receiving client that receives messages sequentially. A JMS message queue is
an administered object that represents the message destination for the sender and the message source for the
receiver.
b#@
Publish/Subscribe: is a one-to-many publishing model where client applications publish messages to topics,
which are in turn subscribed by other interested clients. All subscribed clients will receive each message. 




H3#@6. Which is better to store data as elements or as attributes?
A question arising in the mind of XML/DTD designers is whether to model and encode certain information using an
element, or alternatively, using an attribute. The answer to the above question is not clear-cut. But the general
guideline is:
a. Using an element: 
CODE_START#
START_SNIPPET
<book><title>Lord of the Rings</title>...</book>:
CODE_END#
If you consider the information in
question to be part of the essential material that is being expressed or communicated in the XML, put it in an
element
b#@
b. Using an attribute: 
CODE_START#
START_SNIPPET
<book title=" Lord of the Rings ">..</book>CODE_END#
If you consider the information to be peripheral or
incidental to the main communication, or purely intended to help applications process the main
communication, use attributes.


H3#@7. What is XPATH? What is XSLT/XSL/XSL-FO/XSD/DTD etc? What is JAXB? What is JAXP?
bo#@XML
XML stands for eXtensible Markup Language
CODE_START#
START_SNIPPET
<?xml version="1.0"?>
<note>
<to>Peter</to>
<from>Paul</from>
<title>Invite</title>
<content language=”English”>Not Much</content>
< content language=”Spanish”>No Mucho</content >
</note>
CODE_END#

b#@
bo#@DTD
DTD stands for Document Type Definition. XML provides an application independent way of sharing data. With a
DTD, independent groups of people can agree to use a common DTD for interchanging data. Your application can
use a standard DTD to verify that data that you receive from the outside world is valid. You can also use a DTD to
verify your own data. So the DTD is the building blocks or schema definition of the XML document.
CODE_START#
START_SNIPPET
<!ELEMENT note (to, from, title, content)>
<!ELEMENT to (#PCDATA)>
<!ELEMENT from (#PCDATA)>
<!ELEMENT title (#PCDATA)>
<!ELEMENT content (#PCDATA)>
<!ATTLIST content language CDATA #Required>
CODE_END#

b#@
bo#@XSD
XSD stands for Xml Schema Definition, which is a successor of DTD. So XSD is a building block of an XML document.
If you have DTD then why use XSD you may ask? 
XSD is more powerful and extensible than DTD.
CODE_START#
START_SNIPPET
<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://www.w3schools.com" xmlns="http://www.w3schools.com"
	elementFormDefault="qualified">
	<xs:element name="note">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="to" type="xs:string" />
				<xs:element name="from" type="xs:string" />
				<xs:element name="title" type="xs:string" />
				<xs:element name="content" type="xs:string" />
			</xs:sequence>
		</xs:complexType>
		<xs:attribute name="language" type=”xs:string” use=”Required” />
	</xs:element>
</xs:schema>
CODE_END#
b#@
bo#@XSL
XSL stands for eXtensible Stylesheet Language. The XSL
consists of 3 parts:
• XSLT: Language for transforming XML documents from one to another.
• XPath: Language for defining the parts of an XML
document.
• XSL-FO: Language for formatting XML documents.
For example to convert an XML document to a PDF
document etc.
XSL can be thought of as a set of languages that can :
• Define parts of an XML
• Transform an XML document to XHTML (eXtensible
Hyper Text Markup Language) document.
• Convert an XML document to a PDF document.
• Filter and sort XML data.
XSLT processor example: Xalan (From Apache)
PDF Processor example: FOP (Formatting Objects
Processor from Apache)
CODE_START#
START_SNIPPET
<?xml version="1.0"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/TR/WD-xsl">
	<xsl:template match="/">
		<xsl:apply-templates select="note " />
	</xsl:template>
	<xsl:template match="note">
		<html>
			<head>
				<title>
					<xsl:value-of select="content/@language">
				</title>
			</head>
		</html>
	</xsl:template>
</xsl:stylesheet>
CODE_END#

b#@
bo#@JAXP
Stands for Java API for XML Processing. This provides a common interface for creating and using SAX, DOM, and
XSLT APIs in Java regardless of which vendor’s implementation is actually being used (just like the JDBC, JNDI interfaces).
b#@
bo#@JAXB
Stands for Java API for XML Binding. This standard defines a mechanism for writing out Java objects as XML
(marshalling) and for creating Java objects from XMLstructures (unmarshalling). (You compile a class
description to create the Java classes, and use those classes in your application.)



H3#@7.	Explain inner and outer joins?
Joins allow database users to combine data from one table with data from one or more other tables (or views, or
synonyms). Tables are joined two at a time making a new table containing all possible combinations of rows from
the original two tables. Lets take an example (syntax vary among RDBMS):
img#@http://www.alvechurchdata.co.uk/hints-and-tips/..%5Cmedia%5Cimages%5Ctypesofjoin.gif




H3#@8.	What is view? Why use a view?
View is a precompiled SQL query, which is used to select data from one or more tables.
A view is like a table but it doesn’t physically take any space (ie not materialised). Views
are used for
a. Providing inherent security by exposing only the data that is needed to be shown to
the end user.
b. Enabling re-use of SQL statements.
c. Allows changes to the underlying tables to be hidden from clients, aiding
maintenance of the database schema (i.e. encapsulation).
Views with multiple joins and filters can dramatically degrade performance because
views contain no data and any retrieval needs to be processed. The solution for this is to
use materialised views or create de-normalised tables to store data. This technique is
quite handy in overnight batch processes where a large chunk of data needs to be
processed. Normalised data can be read and inserted into some temporary denormalised
table and processed with efficiency. 


H3#@9.	What application servers, Web servers, LDAP servers, and Database servers have you used?
TABLE_START#
START_TABLE_CONTENT
row#@Web Servers column#@Apache, Microsoft IIS, Netscape, Domino etc
row#@Application Servers column#@IBM Websphere, BEA Weblogic, Apache Tomcat, Borland Enterprise Server, Fujitsu, Interstage, JBoss, ATG Dynamo etc
row#@LDAP Servers column#@IPlanet’s directory server, SiemensDirX etc
row#@Database Servers column#@IBM DB2, Oracle, SQL Server, Sybase, Informix 
TABLE_END#


H3#@10. What is the difference between a Web server and an application server?
In general, an application server prepares data for a Web server -- for example, gathering data from databases,
applying relevant business rules, processing security checks, and/or storing the state of a user’s session. The
term application server may be misleading since the functionality isn’t limited to applications. Its role is more as
retriever and manager of data and processes used by anything running on a Web server. In the coming age of
Web services, application servers will probably have an even more important role in managing service oriented
components. One of the reasons for using an application server is to improve performance by off-loading tasks
from a Web server. When heavy traffic has more users, more transactions, more data, and more security checks
then more likely a Web server becomes a bottleneck.
b#@
bo#@Web Server
Supports HTTP protocol. When a Web server receives an HTTP request, it responds with an HTTP response, such
as sending back an HTML page (static content) or delegates the dynamic response generation to some other
program such as CGI scripts or Servlets or JSPs in an application server.
It also Uses various scalability and fault-tolerance techniques.
b#@
bo#@Application Server
Exposes business logic and dynamic content to a client through various protocols such as HTTP, TCP/IP, IIOP, JRMP
etc. Uses various scalability and fault-tolerance techniques. In addition provides resource pooling, component life cycle
management, transaction management, messaging, security etc.



H3#@11.	Give some tips on J2EE application server performance tuning?
1.	Set the Web container threads, which will be used to process incoming HTTP requests. The minimum
size should be tuned to handle the average load of the container and maximum should be tuned to
handle the peak load. The maximum size should be less than or equal to the number of threads in your
Web server.
2. When an EJB is called from a servlet or another EJB within the same JVM (i.e. same application server)
then performance can be improved by running EJBs in pass-by-reference mode as oppose to pass-byvalue
which is the default mode. Care should be taken to test the application properly before going into
production because some valid applications may not work correctly when pass-by-reference setting is
switched on.
3. Application servers maintain a pool of JDBC resources so that a new connection does not need to be
created for each transaction. Application servers can also cache your prepared statements to improve
performance. So you can tune the minimum and maximum size of these pools.
4. Tune your initial heap size for the JVM so that the garbage collector runs at a suitable interval so that it
does not cause any unnecessary overhead. Adjust the value as required to improve performance. 
5.	Set the session manager settings appropriately based on following guidelines:
	a. Set the appropriate value for in memory session count.
	b. Reduce the session size.
	c. Don’t enable session persistence unless required by your application.
	d.	Invalidate your sessions when you are finished with them by setting appropriate session timeout.


H3#@12.	Design considerations during design, development and deployment phases:
designing a fast, secured, reliable, robust, reusable and flexible system require considerations in the following key areas:
b#@
1. Performance issues (network overheads, quality of the code etc): Can I make a single coarse-grained
network call to my remote object instead of 3 fine-grained calls?
2. Concurrency issues (multi-threading etc): What if two threads access my object simultaneously will it
corrupt the state of my object?
3. Transactional issues (ACID properties): What if two clients access the same data simultaneously?
What if one part of the transaction fails, do we rollback the whole transaction? What if the client
resubmits the same transactional page again?
4. Security issues: Are there any potential security holes for SQL injection or URL injection by hackers?
5. Memory issues: Is there any potential memory leak problems? Have we allocated enough heap size for
the JVM? Have we got enough perm space allocated since we are using 3rd party libraries, which
generate classes dynamically? (e.g. JAXB, XSLT, JasperReports etc)
6. Scalability issues: Will this application scale vertically and horizontally if the load increases? Should
this object be serializable? Does this object get stored in the HttpSession
7. Maintainability, reuse, extensibility etc: How can we make the software reusable, maintainable and
extensible? What design patterns can we use? How often do we have to refactor our code?
8. Logging and auditing if something goes wrong can we look at the logs to determine the root cause of
the problem?
9. Object life cycles: Can the objects within the server be created, destroyed, activated or passivated
depending on the memory usage on the server? (e.g. EJB).
10. Resource pooling: Creating and destroying valuable resources like database connections, threads etc
can be expensive. So if a client is not using a resource can it be returned to a pool to be reused when
other clients connect? What is the optimum pool size?
11. Caching can we save network trips by storing the data in the server’s memory? How often do we have
to clear the cache to prevent the in memory data from becoming stale?
12. Load balancing: Can we redirect the users to a server with the lightest load if the other server is
overloaded?
13. Transparent fail over: If one server crashes can the clients be routed to another server without any
interruptions?
14. Clustering: What if the server maintains a state when it crashes? Is this state replicated across the
other servers?
15. Back-end integration: How do we connect to the databases and/or legacy systems?
16. Clean shutdown: Can we shut down the server without affecting the clients who are currently using the
system?
17. Systems management: In the event of a catastrophic system failure who is monitoring the system? Any
alerts or alarms? Should we use JMX? Should we use any performance monitoring tools like Tivoli etc?
18. Dynamic redeployment: How do we perform the software deployment while the site is running? (Mainly
for mission critical applications 24hrs X 7days).
19.ortability issues: Can I port this application to a different server 2 years from now? 


H3#@13. How would you go about describing Web services?
A service is an application that exposes its functionality through an API (Application
Programming Interface). So what is a component you may ask? A service is a component
that can be used remotely through a remote interface either synchronously or asynchronously.
The term service also implies something special about the application design, which is called a
service-oriented architecture (SOA). One of the most important features of SOA is the
separation of interface from implementation. A service exposes its functionality through
interface and interface hides the inner workings of the implementation. The client application
(ie user of the service) only needs to know how to use the interface. The client does not have
to understand actually how the service does its work. For example: There are so many
different models of cars like MAZDA, HONDA, TOYOTA etc using different types of engines,
motors etc but as a user or driver of the car you do not have to be concerned about the
internals. You only need to know how to start the car, use the steering wheel etc, which is the
interface to you.



H3#@14.	What is aspect oriented programming? Explain AOP?
Aspect-Oriented Programming (AOP) complements OOP (Object Oriented Programming) by allowing the
developer to dynamically modify the static OO model to create a system that can grow to meet new requirements.
AOP allows you to dynamically modify your static model consisting mainly of business logic to include the code
required to fulfil the secondary requirements or in AOP terminology called cross-cutting concerns (secondary
requirements) like auditing, logging, security, exception handling etc without having to modify the original static
model (in fact, we don't even need to have the original code). Better still, we can often keep this additional code in
a single location rather than having to scatter it across the existing model, as we would have to if we were using
OOP on its own.
b#@
For example; A typical Web application will require a servlet to bind the HTTP request to an object and then
passes to the business handler object to be processed and finally return the response back to the user. So only a
minimum amount of code is initially required. But once you start adding all the other additional secondary
requirements or cross-cutting concerns like logging, auditing, security, exception-handling etc the code will inflate
to 2-4 times its original size. This is where AOP can assist by separately modularizing these cross-cutting
concerns and integrating theses concerns at runtime or compile time through aspect weaving. AOP allows rapid
development of evolutionary prototype using OOP by focussing only on the business logic by omitting concerns
such as security, auditing, logging etc. Once the prototype is accepted, additional concerns like security, logging,
auditing etc can be weaved into the prototype code to transfer it into a production standard application.
AOP nomenclature is different from OOP and can be described as shown below:
b#@
bo#@Join points: 
represents the point at which a cross-cutting concern like logging, auditing etc intersects with a main
concern like the core business logic. Join points are locations in programs’ execution path like method &
constructor call, method & constructor execution, field access, class & object initialization, exception handling
execution etc.
b#@
bo#@pointcut: 
is a language construct that identifies specific join points within the program. A pointcut defines a
collection of join points and also provides a context for the join point.
b#@
bo#@Advice: 
is an implementation of a cross-cutting concern which is a piece of code that is executed upon reaching a
pointcut within a program.
b#@
bo#@Aspect: 
encapsulates join points, pointcuts and advice into a reusable module for the cross-cutting concerns
which is equivalent to Java classes for the core concerns in OOP. Classes and aspects are independent of one
another. Classes are unaware of the presence of aspects, which is an important AOP concept. Only pointcut
declaration binds classes and aspects.
b#@
bo#@Weaving:
is the process for interleaving separate cross-cutting concerns such as logging into core concern such
as business logic code to complete the system. AOP weaver composes different implementations of aspects into a
cohesive system based on weaving rules. The weaving process (aka injection of aspects into Java classes) can
happen at:
1. Compile-time: Weaving occurs during compilation process.
2. Load-time: Weaving occurs at the byte-code level at class loading time.
3. Runtime: Similar to load-time where weaving occurs at byte-code level during runtime as join points are
reached in the executing application.
b#@
bo#@Example: We have Engine.Java class which has public methods. aspectJ is used for Logging and errorHandling: 

CODE_START#
START_SNIPPET
public aspect LogAspectJ percflow(execute(Engine)){
	
	public pointcut execute(Engine engine) :
		( execution(public * *(..)) && !withincode(* Engine.getInstance(..)))
		&& target(engine);

		LogTransaction logTrans = null;
		boolean isError = false;
		
		/*[1] It will be executed before begining of the method */
		before(Engine engine) : execute(engine) {
	        String method = thisJoinPoint.getSignature().getName();
	        //Start Log transaction for a given method
			//Log(method)
		}

		/*[2] It catches runtime Exception which will not caught by any handler...
			  and it also returns the Response */ 
			Response around() throws RuntimeException :
					execution(com.hanu.app.Response com.hanu.app.Engine.*(..))  {
		 
			try{
		        return proceed();
			}catch(CheckedException e) {
				AppError error = e.getAppError();
				Response response = new Response();
				response.addError(error);
				isError = true;
				return response;
			} catch(Throwable th){
				Response response = new Response();
		        String additionalMsg = th.getMessage();
				AppError error = AppHelper.getError(AppErrorConstants.App_ERROR_00001, additionalMsg);
				response.addError(error);
				isError = true;
				return response;
			}
			
		}
		
		/*[3] It will be executed after execution of the method */
		after(Engine engine) : execute(engine) {
	        if(isError){
	        	logTrans.setStatus("ERROR");
	        }else{
	        	logTrans.setStatus("0");
	        }
	        logTrans.completed();
		}

		/*[4] Explicit exception handling using pointcut */
		/*after(Engine engine) throwing (Throwable t): execute(engine){
			String method = thisJoinPoint.getSignature().getName();
			System.err.println("Threw from entire method:"+t.getMessage()+". "+method);
			logTrans.setStatus(t);
		}*/
		
		/*[5] Explicit Exception catch */ 
		/*after() throwing (Throwable t): execution(public * *(..)) && within (com.hanu.app.Engine) {
			String method = thisJoinPoint.getSignature().getName();
			System.err.println("Threw in the method :"+t.getMessage()+". "+method);
			logTrans.setStatus(t);
		}*/
	
		/*[6] Internal throwable Exception with pointcut */
		 before (Throwable t,Engine engine): handler(Throwable+) && args(t) && execute(engine) {
			 	isError = true;
		 }
		 
		/*
		 * [7] Internal throwable Exception without pointcut and it will watch all
		 * methods (private, protected and public)
		 */
		 before (Throwable t): handler(Exception+) && args(t) && within (com.hanu.app.Engine){
			 	isError= true;
			 	String method = thisJoinPoint.getSignature().getName();
			 	String arg = thisJoinPoint.getSignature().getDeclaringTypeName();
			 	System.out.println(" i am at private aspectJ catch: "+arg);
		 }
		

}
 
CODE_END#

H3#@15.	What is inversion of control (IOC) (also known as dependency injection)?
Inversion of control or dependency injection is a term used to resolve component dependencies by injecting an
instantiated component to satisfy dependency as opposed to explicitly requesting a component. So components
will not be explicitly requested but components are provided as needed with the help of an Inversion of controller
containers. This is analogous to the Hollywood principal where the servicing components say to the requesting
client code “don’t call us, we’ll call you”. Hence it is called inversion of control.
b#@
Most of you all are familiar with the software development context where client code (requesting code)
collaborates with other dependent components (or servicing components) by knowing which components to talk
to, where to locate them and how to talk with them. This is achieved by embedding the code required for locating
and instantiating the requested components within the client code. The above approach will tightly couple the
dependent components with the client code. This tight coupling can be resolved by applying the factory design
pattern and program to interfaces not to implementations driven development. But the factory design pattern
is still an intrusive mechanism because servicing components need to be requested explicitly. Let us look at how
dependency injection comes to our rescue. It takes the approach that clients declare their dependency on
servicing components through a configuration file (like xml) and some external piece of code assumes the
responsibility of locating and instantiating these servicing components and supplying the relevant references when
needed to the client code. This external piece of code is often referred to as IOC (aka dependency injection)
container or framework.
b#@
IOC or dependency injection containers generally control creation of objects (by calling “new”) and resolve
dependencies between objects it manages. Spring framework, Pico containers, Hivemind etc are IoC containers to
name a few. IOC containers support eager instantiation, which is quite useful if you want self-starting services
that “come up” on their own when the server starts. They also support lazy loading, which is useful when you
have many services which may only be sparsely used. Here is pseudo code for how IOC would work:
 


H3#@16.	TERMS
TABLE_START#
START_TABLE_CONTENT
row#@TERM header#@DESCRIPTION
row#@ACIDcolumn#@Atomicity, Consistency, Isolation, Duration.
row#@aka column#@Also known as.
row#@AOP column#@Aspect Oriented Programming
row#@API column#@Application Program Interface
row#@AWT column#@Abstract Window Toolkit
row#@BLOB column#@Binary Large Object
row#@BMP column#@Bean Managed Persistence
row#@CGI column#@Common Gateway Interface
row#@CLOB column#@Character Large OBject
row#@CMP column#@Container Managed Persistence
row#@CORBA column#@Common Object Request Broker Architecture
row#@CRM column#@Customer Relationships Management
row#@CSS column#@Cascading Style Sheets
row#@DAO column#@Data Access Object
row#@DNS column#@Domain Name Service
row#@DOM column#@Document Object Model
row#@DTD column#@Document Type Definition
row#@EAR column#@Enterprise ARchive
row#@EIS column#@Enterprise Information System
row#@EJB column#@Enterprise JavaBean
row#@ERP column#@Enterprise Resource Planning
row#@FDD column#@Feature Driven Development
row#@GIF column#@Graphic Interchange Format
row#@GOF column#@Gang Of Four
row#@HQL column#@Hibernate Query Language.
row#@HTML column#@Hyper Text Markup Language
row#@HTTP column#@Hyper Text Transfer Protocol
row#@I/O column#@Input/Output
row#@IDE column#@Integrated Development Environment
row#@IIOP column#@Internet Inter-ORB Protocol
row#@IoC column#@Inversion of Control
row#@IP column#@Internet Protocol
row#@J2EE column#@Java 2 Enterprise Edition
row#@JAAS column#@Java Authentication and Authorization Service
row#@JAF column#@JavaBeans Activation Framework
row#@JAR column#@Java ARchive
row#@JAXB column#@Java API for XML Binding
row#@JAXP column#@Java API for XML Parsing
row#@JAXR column#@Java API for XML Registries
row#@JAX-RPC column#@Java API for XML-based RPC
row#@JAX-WS column#@Java API for XML-based Web Services
row#@JCA column#@J2EE Connector Architecture
row#@JDBC column#@Java Database Connectivity
row#@JDK column#@Java Development Kit
row#@JMS column#@Java Messaging Service
row#@JMX column#@Java Management eXtensions
row#@JNDI column#@Java Naming and Directory Interface
row#@JNI column#@Java Native Interface
row#@JRMP column#@Java Remote Method Protocol
row#@JSF column#@JavaServer Faces
row#@JSP column#@Java Server Pages
row#@JSTL column#@Java Standard Tag Library
row#@JTA column#@Java Transaction API
row#@JVM column#@Java Virtual Machine
row#@LDAPcolumn#@Lightweight Directory Access Protocol
row#@MOMcolumn#@ Message Oriented Middleware
row#@MVCcolumn#@Model View Controller
row#@NDScolumn#@ Novell Directory Service
row#@NIOcolumn#@ New I/O
row#@O/R column#@mapping Object to Relational mapping.
row#@OO column#@Object Oriented
row#@OOP column#@Object Oriented Programming
row#@OOPLcolumn#@ Object Oriented Programming Language
row#@ORB column#@Object Request Broker
row#@ORM column#@Object to Relational Mapping.
row#@POJI column#@Plain Old Java Interface
row#@POJO column#@Plain Old Java Object
row#@RAR column#@Resource adapter ARchive
row#@RDBMS column#@Relational Database Management System
row#@RMI column#@Remote Method Invocation
row#@RPC column#@Remote Procedure Call
row#@RUP column#@Rational Unified Process
row#@SAAJ column#@SOAP with attachment API for Java
row#@SAX column#@Simple API for XML
row#@SOAP column#@Simple Object Access Protocol
row#@SQL column#@Structured Query Language
row#@SSL column#@Secure Sockets Layer
row#@TCP column#@Transmission Control Protocol
row#@TDD column#@Test Driven Development
row#@UDDI column#@Universal Description Discovery and Integration
row#@UDPcolumn#@ User Datagram Protocol
row#@UI column#@User Interface
row#@UML column#@Unified Modelling Language
row#@URI column#@Uniform Resource Identifier
row#@URL column#@Uniform Resource Locator
row#@WARcolumn#@Web ARchive
row#@WSDL column#@Web Service Description Language
row#@XHTMLcolumn#@ Extensible Hypertext Markup Language
row#@XML column#@Extensible Markup Language
row#@XP column#@Extreme Programming
row#@XPath column#@XML Path
row#@XSD column#@XML Schema Definition
row#@XSL column#@Extensible Style Language
row#@XSL-FO column#@Extensible Style Language – Formatting Objects
row#@XSLT column#@Extensible Style Language Transformation
TABLE_END#
