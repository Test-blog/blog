b#@[1] Sign up on github: a#@http://github.com/join #@Click here to join gitb#@     img#@\images\git\1signup.png  b#@[2] Upload your public key to access github from your local machine: https://github.com/settings/sshb#@    img#@\images\git\2ssh.png  b#@[3] First generate SSH key: https://help.github.com/articles/generating-ssh-keysb#@[4] Upload your public key to github as per mentioned at step [2]. So, you are allowed to checkin your code through your local machine to github.b#@[5] Create a new git repo: https://github.com/newGive repository name and description and click on "Create repository".b#@    img#@\images\git\3createrepo.png b#@[6] Next step: Let's checkin some code to newly created repositoryCopy git clone url from: HTTP clone URLb#@    img#@\images\git\4clone.png b#@[7] Open command promptb#@[8] Go to location where you want to clone the repositoryb#@[9] Check if you have already installed the Git. Verify by : Command Prompt > gitIf no then follow step [10] else follow from step [11]b#@[10] Download tortoise git: https://code.google.com/p/tortoisegit/wiki/Downloadb#@10.1 Install it.b#@10.2 Configure git config file at :/HOME/.gitconfigYou can check your HOME directory by: Environment Variable > System Variable > HOMEOrb#@10.2 Follow steps here: https://help.github.com/articles/set-up-git Basically you need to setup your email id with which you will checkin.BOX_START#START_BOX_CONTENT(1) git config --global user.name "Your Name Here"(2) git config --global user.email "your_email@example.com"BOX_END#b#@[11] Let's clone the repository. After step [9], you are in Command prompt > direcotryb#@11.1: git clone https://github.com/Test-blog/test.gitb#@11.2 It will clone your repo. Make sure you will give your repo name in step: 11.1 instead of https://github.com/Test-blog/test.git b#@11.3 go to repo folder. i.e.: cd Test-blogb#@11.4 create test file: > touch test.txtb#@11.5 checkin test.txt by follow below steps:b#@11.5.1 git add test.txtb#@11.5.2 git commit -m 'checkin test file'b#@11.5.3. git push origin masterb#@    img#@\images\git\5push.png H2#@Git recommended branching strategyThe quick and easiest way to manage branch strategy by creating fork out of your master branch. Do your feature development on the created fork branch.1. You can do rebase from master to your fork to keep your branch up to date.2. Once development will be done, you can merge your fork to master back.Let's consider an example: we have a master repo : https://github.com/MasterWe have fork out of it: https://github.com/ForkH4#@  How to rebase fork feature branch with master.BOX_START#START_BOX_CONTENT1. First go to your feature fork branch.	a. Clone : git clone https://github.com/Fork 	b. go to root directory   2. Add your master as a remote branch to pull master changes:	git remote add upstream https://github.com/Master3.  pull changes from master	git pull upstream master4.  pull changes from the fork (if there are multiple devs working on the same fork)	git pull5.  resolve conflicts if any	a. git mergetool	b. for more information check FAQ:6. push to github	git pushBOX_END#b#@	H4#@ How to Merge fork to MasterBOX_START#START_BOX_CONTENT1. Go to master branch	a. git clone: https://github.com/Master	b. go to root directory2. pull changes from master	git pull3. pull changes from the fork	git pull https://github.com/Fork4. Make *full* build	mvn clean install5. If build is green : push changes to the remote master	git push BOX_END#H4#@ Tips while merging code.1. Install any git merge tool such as : kdiff, tortoise git.b#@2. Configure your .gitconfig with newly installed mergetoolexample:BOX_START#START_BOX_CONTENT[user]                name = test                email = test@gmail.com[merge]                tool = tmerge[mergetool "tmerge"]                cmd = \"C:/Program Files/TortoiseGit/bin/TortoiseGitMerge.exe\" -base:\"$BASE\" -theirs:\"$REMOTE\" -mine:\"$LOCAL\" -merged:\"$MERGED\"[mergetool]                keepBackup = false                [color]    ui = auto  [color "branch"]    current = yellow reverse    local = yellow    remote = green  [color "diff"]    meta = yellow bold    frag = magenta bold    old = red bold    new = green bold  [color "status"]    added = yellow    changed = green    untracked = cyan         [core]                whitespace = nowarn                editor = gvim[apply]                whitespace = fixBOX_END#b#@3. go to root directoryBOX_START#START_BOX_CONTENT	git pull	git mergetoolresolve conflicts.	git push origin masterBOX_END#H3#@Some Useful commands:H4#@Create a new branchBOX_START#START_BOX_CONTENT	git checkout newBranch	git push -f origin newBranch (It will create new branch)BOX_END#H4#@Switch to different branch and commit changesBOX_START#START_BOX_CONTENT	git checkout -b branchName 	git add . -u	git commit -m 'message'	git push -f origin branchNameBOX_END#H4#@Delete branchBOX_START#START_BOX_CONTENT	git checkout master (move to some other branch)	git branch -d newBranch	git push origin :newBranch (It will delete new branch)BOX_END#H4#@See the branch pathBOX_START#START_BOX_CONTENT	git remote show originBOX_END#H4#@Checkout the local branch by pointing remote branchBOX_START#START_BOX_CONTENT	git checkout -b banch2 origin/branch2BOX_END#H4#@Check new changes: difference of remote and localBOX_START#START_BOX_CONTENT	git diff -numstat origin/masterBOX_END#H4#@If there is a merge conflict with upstream branch, if you want to overwrite it:BOX_START#START_BOX_CONTENT	git checkout --ours filename.c	git checkout --theirs filename.c	git add filename.c	git commit -m "using theirs"BOX_END#H4#@Mimic push BOX_START#START_BOX_CONTENT	git push --dry-runBOX_END#H4#@Reset repo to remote HEADBOX_START#START_BOX_CONTENT	git reset --hard origin/masterBOX_END#H4#@Specific fileBOX_START#START_BOX_CONTENT	git checkout HEAD - myFile.txtBOX_END#